rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isAdmin() {
      return isSignedIn() && getRole(request.auth.uid) == 'admin';
    }

    function isMentor() {
      return isSignedIn() && getRole(request.auth.uid) == 'mentor';
    }

    function isUser() {
      return isSignedIn() && getRole(request.auth.uid) == 'user';
    }

    // --- Collection Rules ---

    // Admin configuration can be read by anyone for login, but only written by your backend.
    match /admin_config/{docId} {
      allow read: if true;
      allow write: if false; // Should only be updatable from a secure backend/admin SDK
    }
    
    // Application submissions can be created by anyone, but only read/updated by your backend.
    match /contactSubmissions/{submissionId} {
      allow read: if false;
      allow update: if false;
      allow delete: if false;
      allow create: if true; // Anyone can submit the form
    }

    match /offCampusApplications/{submissionId} {
      allow read: if false;
      allow update: if false;
      allow delete: if false;
      allow create: if true; // Anyone can submit the form
    }

    // Users can only read/write their own data.
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      // Deny public creation/deletion of user documents. This is handled by your backend.
      allow create, delete: if false; 
    }
    
    // Public collections can be read by anyone. Writes are blocked from the client.
    match /startups/{startupId} {
      allow read: if true;
      allow write: if false; // Admin actions only
    }

    match /events/{eventId} {
      allow read: if true;
      allow write: if false; // Admin actions only
    }

    // Mentors can be read by anyone, but only written to by the backend.
    match /mentors/{mentorId} {
      allow read: if true;
      allow write: if false; // Admin actions only
    }

    // Mentor Requests: Secure access based on role
    match /mentorRequests/{requestId} {
      allow create: if isUser(); // Only users can create requests
      allow read: if isOwner(resource.data.userId) || isOwner(resource.data.mentorId) || isAdmin(); // User, Mentor, or Admin can read
      allow update: if isOwner(resource.data.mentorId) || isAdmin(); // Mentor or Admin can update (e.g., status)
      allow delete: if isAdmin(); // Only Admin can delete
    }

    // Notifications: Users can only access their own notifications.
    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      // Creation should be handled by secure backend functions.
      allow create: if false; 
    }

    // Email Tokens: Should only be accessible by the server. Lock down client access.
    match /emailTokens/{tokenId} {
      allow read, write, delete: if false;
    }
  }
}
